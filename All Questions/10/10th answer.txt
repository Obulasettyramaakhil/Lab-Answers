//Implement the Matrix Transportation program using the Remote Method Invocation (RMI) mechanism.

//RMIDemoServer
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.server.UnicastRemoteObject;

class RMIDemoImpl extends UnicastRemoteObject implements RMIDemoInterface{
	private static final long serialVersionUID = 1L;
	
	protected RMIDemoImpl() throws RemoteException {
		super();
	}

	@Override
	public String sayHello() throws RemoteException {
		return "Hello Client! Welcome:";
	}

	@Override
	public int[][] mul(int matrix[][], int n) throws RemoteException {
		int result[][] = new int[n][n];
		for(int i = 0; i < n; i++)
		{
			for(int j = 0; j < n; j++)
			{
				result[j][i] = matrix[i][j];
			}
		}
		return result;
	}	
}
public class RMIDemoServer {
	public static void main(String[] args) {
		try {
			RMIDemoInterface rmiDemoObject = new RMIDemoImpl();
			LocateRegistry.createRegistry(1099);
			Naming.rebind("rmiDemoObject",rmiDemoObject);
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}

}

//RMIDemoClient.java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;


public class RMIDemoClient {
	public static void main(String[] args) {
		String url= "rmi://localhost:1099/rmiDemoObject";
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		try {
			RMIDemoInterface remoteIntf = (RMIDemoInterface) Naming.lookup(url);
			System.out.println(remoteIntf.sayHello());
 			System.out.println("Enter matrix1 of row and column number:");
			System.out.print("n: ");
			int n = Integer.parseInt(br.readLine());

        			int matrix[][] = new int[n][n];
 
        			System.out.println("Enter values for matrix1 : \n");
        			for (int i = 0; i < n; i++) 
			{
            				for (int j = 0; j < n; j++) 
				{
                					matrix[i][j] = Integer.parseInt(br.readLine());
        				}
      			}
        			System.out.println("Printing numbers without Transpose");
			for(int i = 0; i < n; i++)
			{
				for(int j = 0; j < n; j++)
				{
					System.out.print(matrix[i][j] + " ");
				}
				System.out.println();
			}
			int[][] ans = remoteIntf.mul(matrix, n);
			System.out.println("After Transpose");
			for(int i = 0; i < n; i++)
			{
				for(int j = 0; j < n; j++)
				{
					System.out.print(ans[i][j] + " ");
				}
				System.out.println();
			}	
		} catch (MalformedURLException | RemoteException | NotBoundException e) {
			e.printStackTrace();
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

//RMIInterface.java
import java.rmi.Remote;
import java.rmi.RemoteException;


public interface RMIDemoInterface extends Remote{
	public String sayHello() throws RemoteException;
	public int[][] mul(int matrix[][], int r1, int c1) throws RemoteException;
}

